"use client";
import { useState } from "react";
import Sidebar from "./Sidebar";
import ReportsPanel from "./ReportsPanel";
import MapComponent from "./MapComponent";

export default function HomePage() {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [reportsPanelCollapsed, setReportsPanelCollapsed] = useState(false);
  const [highlightedEventId, setHighlightedEventId] = useState<string | null>(null);
  const [filteredEventId, setFilteredEventId] = useState<string | null>(null);

  const handleEventClick = (eventId: string) => {
    // If reports panel is collapsed, expand it first
    if (reportsPanelCollapsed) {
      setReportsPanelCollapsed(false);
    }
    
    setHighlightedEventId(eventId);
    setFilteredEventId(eventId); // Filter to show only this event
    // Keep highlight longer to allow for scrolling animation
    setTimeout(() => setHighlightedEventId(null), 5000);
  };

  const handleClearFilter = () => {
    setFilteredEventId(null);
    setHighlightedEventId(null);
  };

  // Sidebar width
  const sidebarWidth = sidebarCollapsed ? 64 : 256;

  return (
    <div className="h-screen w-screen flex overflow-hidden">
      {/* Sidebar with fixed width */}
      <div
        className="h-full z-40 bg-white shadow-lg transition-all duration-300 flex-none"
        style={{ 
          width: sidebarWidth,
          minWidth: sidebarCollapsed ? 64 : 220,
          transitionProperty: 'width, min-width'
        }}
      >
        <Sidebar collapsed={sidebarCollapsed} setCollapsed={setSidebarCollapsed} />
      </div>
      
      {/* Main content area with map and reports panel */}
      <div className="flex-1 relative">
        <MapComponent
          highlightedEventId={highlightedEventId}
          onMarkerClick={handleEventClick}
          sidebarCollapsed={sidebarCollapsed}
          reportsPanelCollapsed={reportsPanelCollapsed}
        />
      {/* Main content area - Map and Reports Panel */}
      <div className="flex-1 flex overflow-hidden">
        {/* Map takes remaining space */}
        <MapComponent
          highlightedEventId={highlightedEventId}
          onMarkerClick={handleEventClick}
          sidebarCollapsed={sidebarCollapsed}
          reportsPanelCollapsed={reportsPanelCollapsed}
        />
        
        {/* Reports Panel */}
        {!reportsPanelCollapsed && (
          <div
            className="h-full z-30 transition-all duration-300 flex-none bg-white shadow-xl"
            style={{ width: 400, minWidth: 320, maxWidth: 480 }}
          >
            <ReportsPanel
              collapsed={reportsPanelCollapsed}
              setCollapsed={setReportsPanelCollapsed}
            sidebarCollapsed={sidebarCollapsed}
            onEventClick={handleEventClick}
            highlightedEventId={highlightedEventId}
            filteredEventId={filteredEventId}
            onClearFilter={handleClearFilter}
          />
        </div>
      )}
      
      {/* Collapsed Reports Panel - Floating Button */}
      {reportsPanelCollapsed && (
        <ReportsPanel
          collapsed={reportsPanelCollapsed}
          setCollapsed={setReportsPanelCollapsed}
          sidebarCollapsed={sidebarCollapsed}
          onEventClick={handleEventClick}
          highlightedEventId={highlightedEventId}
          filteredEventId={filteredEventId}
          onClearFilter={handleClearFilter}
        />
      )}
      {/* Map fills remaining space */}
      <div className="h-full flex-1 relative transition-all duration-300 ease-in-out">
        <MapComponent
          highlightedEventId={highlightedEventId}
          sidebarCollapsed={sidebarCollapsed}
          reportsPanelCollapsed={reportsPanelCollapsed}
          onMarkerClick={handleEventClick}
        />
      </div>
    </div>
  );
}
