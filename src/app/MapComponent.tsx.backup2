'use client';

import { useEffect, useRef, useState } from "react";
import mapboxgl from "mapbox-gl";
import "mapbox-gl/dist/mapbox-gl.css";

interface Report {
  id: number;
  title: string;
  description: string;
  coordinates: [number, number];
  severity: string;
}

interface MapComponentProps {
  highlightedEventId?: string | null;
  sidebarCollapsed?: boolean;
  reportsPanelCollapsed?: boolean;
  onMarkerClick?: (eventId: string) => void;
}

export default function MapComponent({
  highlightedEventId,
  sidebarCollapsed,
  reportsPanelCollapsed,
  onMarkerClick,
}: MapComponentProps) {
  const mapContainer = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const markersRef = useRef<{ [key: string]: mapboxgl.Marker }>({});
  const [reports, setReports] = useState<Report[]>([]);
  const [mapLoaded, setMapLoaded] = useState(false);

  useEffect(() => {
    mapboxgl.accessToken = "pk.eyJ1IjoieWF6enlrcyIsImEiOiJjbWU2b2o0eXkxNDFmMm1vbGY3dWt5aXViIn0.8hEu3t-bv3R3kGsBb_PIcw";

    if (mapContainer.current && !mapRef.current) {
      try {
        const map = new mapboxgl.Map({
          container: mapContainer.current,
          style: "mapbox://styles/mapbox/streets-v12",
          center: [36.8219, -1.2921],
          zoom: 12,
          attributionControl: true,
        });

        // Add navigation controls in the middle right
        map.addControl(new mapboxgl.NavigationControl(), "right");

        map.on("load", () => {
          console.log("Map loaded successfully");
          fetchReports();
        });

        map.on("error", (e) => {
          console.error("Mapbox error:", e);
        });

        mapRef.current = map;
      } catch (error) {
        console.error("Error initializing map:", error);
      }
    }

    return () => {
      mapRef.current?.remove();
    };
  }, []);

  const fetchReports = async () => {
    try {
      const response = await fetch("/api/reports");
      const data = await response.json();
      setReports(data.reports || []);
    } catch (error) {
      console.error("Error fetching reports:", error);
    }
  };

  useEffect(() => {
    if (mapRef.current) {
      Object.values(markersRef.current).forEach((marker) => marker.remove());
      markersRef.current = {};

      reports.forEach((report) => {
        const el = document.createElement("div");
        el.className = "marker";
        el.style.backgroundColor = getSeverityColor(report.severity);
        el.style.width = "12px";
        el.style.height = "12px";
        el.style.borderRadius = "50%";
        el.style.cursor = "pointer";

        el.addEventListener("click", () => {
          onMarkerClick?.(report.id.toString());
        });

        const marker = new mapboxgl.Marker(el)
          .setLngLat(report.coordinates)
          .addTo(mapRef.current!);

        markersRef.current[report.id] = marker;
      });
    }
  }, [reports]);

  useEffect(() => {
    if (mapRef.current) {
      const padding = {
        left: sidebarCollapsed ? 50 : 300,
        right: reportsPanelCollapsed ? 50 : 300,
        top: 50,
        bottom: 50,
      };
      if (mapRef.current.getBounds()) {
        mapRef.current.fitBounds(mapRef.current.getBounds() as mapboxgl.LngLatBounds, { padding });
      }
    }
  }, [sidebarCollapsed, reportsPanelCollapsed]);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "low":
        return "#4ade80";
      case "medium":
        return "#fb923c";
      case "high":
        return "#ef4444";
      default:
        return "#ef4444";
    }
  };

  return (
    <div className="relative w-full h-full">
      {/* Map container */}
      <div
        ref={mapContainer}
        className="w-full h-full"
        style={{ width: "100%", height: "100%" }}
      />

      {/* User count button */}
      <div className="absolute top-4 right-4 bg-white rounded-lg shadow-lg px-4 py-2 text-sm font-medium text-gray-800 z-10">
        <span className="flex items-center gap-2">
          <div className="w-2 h-2 bg-red-500 rounded-full"></div>
          Reports: {reports.length}
        </span>
      </div>
    </div>
  );
}
