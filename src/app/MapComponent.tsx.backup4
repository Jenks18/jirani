'use client';

import { useEffect, useRef, useState } from "react";
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import './MapComponent.css';

interface Report {
  id: string;
  title: string;
  description: string;
  location: string;
  coordinates: [number, number];
  severity: string;
  priority: string;
  created_at: string;
}

interface MapComponentProps {
  highlightedEventId?: string | null;
  sidebarCollapsed?: boolean;
  reportsPanelCollapsed?: boolean;
  onMarkerClick?: (eventId: string) => void;
}

export default function MapComponent({
  highlightedEventId,
  sidebarCollapsed,
  reportsPanelCollapsed,
  onMarkerClick,
}: MapComponentProps) {
  const mapContainer = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const markersRef = useRef<{ [key: string]: mapboxgl.Marker }>({});
  const [reports, setReports] = useState<Report[]>([]);

  // Initialize map
  useEffect(() => {
    if (!mapContainer.current || mapRef.current) return;

    mapboxgl.accessToken = "pk.eyJ1IjoieWF6enlqZW5rcyIsImEiOiJjbWU2b2o0eXkxNDFmMm1vbGY3dWt5aXViIn0.8hEu3t-bv3R3kGsBb_PIcw";

    const map = new mapboxgl.Map({
      container: mapContainer.current,
      style: "mapbox://styles/mapbox/streets-v12",
      center: [36.8219, -1.2921], // Nairobi coordinates
      zoom: 12,
    });

    // Add navigation controls to the middle-right
    map.addControl(new mapboxgl.NavigationControl(), 'right');

    map.on("load", () => {
      console.log("Map loaded successfully");
      fetchReports();
    });

    mapRef.current = map;

    return () => {
      map.remove();
    };
  }, []);

  // Fetch reports
  const fetchReports = async () => {
    try {
      const response = await fetch('/api/reports');
      const data = await response.json();
      setReports(data.reports || []);
    } catch (error) {
      console.error('Error fetching reports:', error);
    }
  };

  // Update markers when reports change
  useEffect(() => {
    if (!mapRef.current) return;

    // Clear existing markers
    Object.values(markersRef.current).forEach(marker => marker.remove());
    markersRef.current = {};

    // Add new markers
    reports.forEach((report) => {
      if (!report.coordinates) return;

      const el = document.createElement('div');
      el.className = 'marker';
      el.style.backgroundColor = getSeverityColor(report.severity);
      el.style.width = '12px';
      el.style.height = '12px';
      el.style.borderRadius = '50%';
      el.style.border = '2px solid white';
      el.style.cursor = 'pointer';
      el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)';
      
      // Add hover effects
      el.addEventListener('mouseenter', () => {
        el.style.transform = 'scale(1.5)';
        el.style.zIndex = '1000';
      });
      
      el.addEventListener('mouseleave', () => {
        el.style.transform = 'scale(1)';
        el.style.zIndex = '1';
      });

      const marker = new mapboxgl.Marker(el)
        .setLngLat([report.coordinates[1], report.coordinates[0]])
        .addTo(mapRef.current);

      if (onMarkerClick) {
        el.addEventListener('click', () => {
          onMarkerClick(report.id);
        });
      }

      markersRef.current[report.id] = marker;
    });
  }, [reports, onMarkerClick]);

  // Handle sidebar/panel collapse
  useEffect(() => {
    if (!mapRef.current) return;

    mapRef.current.resize();

    const padding = {
      left: sidebarCollapsed ? 50 : 300,
      right: reportsPanelCollapsed ? 50 : 300,
      top: 50,
      bottom: 50
    };

    const bounds = mapRef.current.getBounds();
    if (bounds) {
      mapRef.current.fitBounds(bounds, { padding });
    }
  }, [sidebarCollapsed, reportsPanelCollapsed]);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'low':
        return '#4ade80'; // Green
      case 'medium':
        return '#fb923c'; // Orange
      case 'high':
        return '#ef4444'; // Red
      default:
        return '#ef4444'; // Default red
    }
  };

  return (
    <div className="flex-1 relative">
      <div 
        ref={mapContainer} 
        className="absolute inset-0 map-container"
        style={{
          minWidth: '100%',
          minHeight: '100%',
          maxWidth: '100%',
          maxHeight: '100%'
        }}
      />
      <div className="absolute top-4 right-4 bg-white rounded-lg shadow-lg px-4 py-2 text-sm font-medium text-gray-800 z-10">
        <span className="flex items-center gap-2">
          <div className="w-2 h-2 bg-red-500 rounded-full" />
          Reports: {reports.length}
        </span>
      </div>
    </div>
  );
}
